# kafka客户端缓冲区大小, 缓存的消息大于该值, 阻塞生产者线程生产数据
buffer.memory = 33554432

# 当前批次消息个数, 达到该个数, kafka客户端会将该批次发往broker
batch.size = 16384

# 批次逗留时间, 如果该batch一直达不到批次消息个数, 该参数起作用, kafka客户端会将该批次发往broker
linger.ms = 5

# 客户端向broker发送失败, 重试次数
retries = 5

# 重试时间间隔
retry.backoff.ms = 100

# 服务端回复前，向broker发送消息最大次数; 设置大于1, 第一个批次还未重试，第二个批次已经发送成功, 无法保序
max.in.flight.requests.per.connection = 1

# 发送消息发送成功或失败的最大时间
delivery.timeout.ms = 120000

# 客户端向broker发送消息，broker何时响应发送成功
# 0, 只要broker收到消息就响应; 大概率丢失数据
# 1, broker收到消息并且写Leader成功; 稍微好点, 但是follower未同步成功前Leader重启, 数据丢失
# -1或all, broker收到消息写Leader成功，并且ISR中的全部follower同步成功; 大概率保证数据不丢失
acks = all

# 幂等性, 三种语义(at-most-once/at-least-once/at-exactly-once)
# 防止数据重复, 创建producer时向kafka申请PID，发给broker的数据key为<PID, 分区ID, seqNum>, 当broker收到相同key的消息，只会持久化一条
# 注意：只能保证分区内不重复; kafka客户端重启，PID变化，而相同的消息发往了同一个分区
enable.idempotence = true

# 生产者事务, 保证数据全局不重复; 方式：全局事务ID，分配PID后与事务ID绑定, 重启后直接查找
# 注意：使用事务的前提是必须开启幂等性
# transactional.id = 1

# 事务超时时间, broker默认最大超时时间为15min, transaction.timeout.ms不能大于该值
transaction.timeout.ms = 600000